When would you want to use a remote repository rather than keeping all your work local?
For sharing! And backups.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
If somebody else pushes something to the remote, and I'm workign on my local, if I get automatic pulls then my local changes without me knowing. Arg.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Fork: GitHub's version of clone that gives credit where it is due. Use when copying someone else's work, then adding to it, without having permission to modify the original repository.
Clone: Copies a repository locally. Use when editing code.
Branch: what's the command again? git branch [name]? Anyways, use it it track separate features.

What is the benefit of having a copy of the last known state of the remote stored locally?
git fetch : updates local copy of remote branch without merging. if your branch has commits that the remote doesn't and the remote had commits that yours doesn't, use git fetch to check it out. it'll update the branch "origin/master", which is a copy of the last known state of the remote, stored locally.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
We could share a keyboard. Then I'd always know when changes are made, because collaborator hands would be in the way.

*****
You just saw that the workflow when making changes in a separate branch is more complicated than working directly in master, especially when you need to stay up-to-date with changes others are making. Rather than simply pulling and pushing, you need to pull changes into your local master branch, merge the local master into your branch (different-oil, in our case), then push your branch to the remote before finally merging your branch into master, either locally or on GitHub.
*****

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
Directly in master is easier, short-term, with no collaborators.
But branches allow review, collaboration, etc. Each collaborator makes changes in their own branch, the changes are review by the team, then merged with the master. Or, they're pulled local, merged with another branch, conflicts resolved, then pushed remote. Neato. Good control.



